/*
 * @BEGIN LICENSE
 *
 * Forte: an open-source plugin to Psi4 (https://github.com/psi4/psi4)
 * that implements a variety of quantum chemistry methods for strongly
 * correlated electrons.
 *
 * Copyright (c) 2012-2020 by its authors (see COPYING, COPYING.LESSER, AUTHORS).
 *
 * The copyrights for code used from other parties are included in
 * the corresponding files.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * @END LICENSE
 */

#ifndef _sparse_fact_exp_h_
#define _sparse_fact_exp_h_

#include "integrals/active_space_integrals.h"
#include "helpers/timer.h"

#include "sparse_ci/sparse_state_vector.h"
#include "sparse_ci/sparse_operator.h"

#include "sparse_ci/determinant_hashvector.h"

namespace forte {

/**
 * @brief The SparseFactExp class
 * This class implements an algorithm to apply a factorized exponential operator to a state
 *
 *    |state> -> ... exp(op2) exp(op1) |state>
 *
 */
class SparseFactExp {
  public:
    /// Constructor
    /// @param phaseless if true, ignore the fermionic sign factor when applying the operator
    SparseFactExp(bool phaseless = false);

    /// @brief Compute the factorized exponential applied to a state using an exact algorithm
    ///
    ///             ... exp(op2) exp(op1) |state>
    ///
    /// This algorithm is useful when applying the factorized exponential repeatedly
    /// to the same state or in an iterative procedure
    /// This function applies only those elements of the operator that satisfy the condition:
    ///     |t * C_I| > screen_threshold
    /// where C_I is the coefficient of a determinant
    ///
    /// @param sop the operator. Each term in this operator is applied in the order provided
    /// @param state the state to which the factorized exponential will be applied
    /// @param algorithm the algorithm used to compute the exponential. If algorithm = 'onthefly'
    /// this function will compute the factorized exponential using an on-the-fly implementation
    /// (slow). Otherwise, a caching algorithm is used.
    /// @param inverse If true, compute the inverse of the factorized exponential
    /// @param screen_thresh a threshold to select which elements of the operator applied to the
    /// state. An operator in the form exp(t ...), where t is an amplitude, will be applied to a
    /// determinant Phi_I with coefficient C_I if the product |t * C_I| > screen_threshold
    StateVector compute(const SparseOperator& sop, const StateVector& state,
                        const std::string& algorithm, bool inverse, double screen_thresh);
    /// @return timings for this class
    std::map<std::string, double> timings() const;

  private:
    void apply_exp_op_fast(const Determinant& d, Determinant& new_d, const Determinant& cre,
                           const Determinant& ann, double amp, double c, StateVector& new_terms);
    void compute_couplings(const SparseOperator& sop, const StateVector& state0, bool inverse);
    StateVector compute_exp(const SparseOperator& sop, const StateVector& state0, bool inverse,
                            double screen_thresh);
    StateVector compute_cached(const SparseOperator& sop, const StateVector& state, bool inverse,
                               double screen_thresh);
    StateVector compute_on_the_fly_antihermitian(const SparseOperator& sop,
                                                 const StateVector& state0, bool inverse,
                                                 double screen_thresh);
    StateVector compute_on_the_fly_excitation(const SparseOperator& sop, const StateVector& state0,
                                              bool inverse, double screen_thresh);

    /// Ignore the fermionic phase?
    bool phaseless_ = false;
    /// Are the coupling initialized?
    bool initialized_ = false;
    /// Are the inverse couplings initialized?
    bool initialized_inverse_ = false;
    /// A map to store the determinants generated by the exponential
    DeterminantHashVec exp_hash_;
    /// A vector of determinant couplings
    std::vector<std::vector<std::tuple<size_t, size_t, double>>> couplings_;
    /// A vector of determinant couplings used when applying the inverse exponential
    std::vector<std::vector<std::tuple<size_t, size_t, double>>> inverse_couplings_;
    /// A map that stores timing information
    std::map<std::string, double> timings_;
};

} // namespace forte

#endif // _sparse_fact_exp_h_
