/*
 * @BEGIN LICENSE
 *
 * Forte: an open-source plugin to Psi4 (https://github.com/psi4/psi4)
 * that implements a variety of quantum chemistry methods for strongly
 * correlated electrons.
 *
 * Copyright (c) 2012-2017 by its authors (see COPYING, COPYING.LESSER, AUTHORS).
 *
 * The copyrights for code used from other parties are included in
 * the corresponding files.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 * @END LICENSE
 */

#ifndef _cartographer_h_
#define _cartographer_h_

#include <fstream>
#include <string>
#include <vector>

namespace psi{ namespace forte{

enum DODType {HistogramDOD,GaussianDOD};

/**
 * This class analyzes the distribution of determinants generated by Explorer
 * @brief The Cartographer class
 */
class Cartographer
{
public:
    Cartographer(Options &options,double min_energy,double max_energy);
    ~Cartographer();
    void accumulate_data(int nmo,std::vector<bool>& Ia,std::vector<bool>& Ib,double det_energy,double a_den_energy,double b_den_energy,int naex,int nbex);

    // Knobs
    /// Set the name of the file containing the DetTour output
    void set_dettour_fname(std::string str) {dettour_fname_ = str;}
    /// set the name of the file containing the density of determinants
    void set_dod_fname(std::string str) {dod_fname_ = str;}
private:
    // Class private data
    /// The minimum value of the energy
    double min_energy_;
    /// The maximum value of the energy
    double max_energy_;
    /// Mapping vector from Pitzer (symmetry blocked) to QT (energy)
    std::vector<int> pitzer_to_qt_;

    // Density of determinants (DOD)
    /// The type of DOD plot
    DODType dod_type_;
    /// The width of the DOD Gaussian
    double dod_bin_width_;
    /// The total number of bins used to form a plot of the DOD
    int ndod_bins_total_;
    /// The number of bins used to represent the range [min_energy_,max_energy_]
    int ndod_bins_center_;
    /// The number of bins added to each margin
    int ndod_bins_margin_;
    /// The percent of the DOD plot allocated for the margins
    int dod_percent_margin_;
    /// The value of the density of determinants
    std::vector<double> dod_;
    /// The dod contribution from one determinant
    std::vector<double> dod_contribution_;
    /// The name of the file containing the density of determinants
    std::string dod_fname_;
    /// The dod file
    std::ofstream* dod_file_;

    // DetTour output
    /// Write an output file for DetTour?
    bool write_file_;
    /// Write the determinants in the occupation representation?
    bool write_occupation_;
    /// Write the determinant energy?
    bool write_det_energy_;
    /// Write the denominator energy?
    bool write_den_energy_;
    /// Write the excitation level of a determinant?
    bool write_excitation_level_;
    /// Write only info for determinants of excitation level
    int restrict_excitation_;
    /// The name of the file containing the DetTour output
    std::string dettour_fname_;
    /// The DetTour file
    std::ofstream* dettour_file_;


    // Class private functions
    /// Accumulate data for the density of states
    void accumulate_dod(double det_energy);
    /// Write the density of determinants to the dod_file_ with name dod_fname_
    void write_dod();
    /// Write a gnuplot input to plot the DOD
    void write_dod_gnuplot_input();
    /// Accumulate data for a DetTour output
    void accumulate_dettour(int nmo,std::vector<bool>& Ia,std::vector<bool>& Ib,double det_energy,double a_den_energy,double b_den_energy,int naex,int nbex);
    /// Write the dettour information to the dettour_file_ with name dettour_fname_
    void write_dettour();
};

}} // End Namespaces

#endif // _cartographer_h_
