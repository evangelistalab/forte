#!/usr/bin/env python
# vim:ft=python
#
# primitive frontend to cmake
# (c) Radovan Bast <radovan.bast@irsamc.ups-tlse.fr>
# (c) Jonas Juselius <jonas.juselius@uit.no>
# licensed under the GNU Lesser General Public License
# Ported to Psi4 by Roberto Di Remigio Oct. 2014
# based on initial work by Andy Simmonett (May 2013)

import os
import sys
import string
import re
import subprocess
import shutil
import datetime
import time

sys.path.append('cmake')
import argparse

root_directory = os.path.dirname(os.path.realpath(__file__))
default_path = os.path.join(root_directory, 'src')
if root_directory != os.getcwd():
    default_path = os.getcwd()

def parse_input():

    parser = argparse.ArgumentParser(description="Configure FORTE",
                            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    group = parser.add_argument_group('PSI4 and Ambit options')
    group.add_argument('--psi4',
            action='store',
            default=None,
            help="""The PSI4 executable.
            If this is left blank this script will attempt to find PSI4 on your system.
            Failing that it will not be able to compile FORTE.""",
            metavar='PATH')
    group.add_argument('--ambit-bindir',
            action='store',
            default=None,
            help="""The ambit binary installation directory.""",
            metavar='PATH')

    return parser.parse_args()


def generate_makefile(args):
    print "   root directory: %s" % root_directory
    print "   psi4 executable: %s" % args.psi4
    print "   ambit binary installation directory: %s\n" % args.ambit_bindir
    if args.psi4 and args.ambit_bindir:
        os.chdir(root_directory + "/src")

        # Run psi4 --new-plugin-makefile
        command = [args.psi4,"--new-plugin-makefile"]
        p = subprocess.call(command, stdout=subprocess.PIPE)

        with open('Makefile','r') as f:
            makefile = f.read()

        if makefile:
            # "NAME = $(shell basename `pwd`)" -> "NAME = forte"
            re_name = re.compile(r"NAME = \$\(shell basename `pwd`\)")
            makefile = re_name.sub("NAME = forte",makefile)

            # "PSITARGET = $(NAME).so" -> "PSITARGET = ../forte.so"
            re_target = re.compile(r"PSITARGET = \$\(NAME\)\.so")
            makefile = re_target.sub("PSITARGET = ../forte.so",makefile)

            # Add "AMBIT_BINDIR = <args.ambit_bindir>"
            # Add "INCLUDES += -I$(AMBIT_BINDIR)/include"
            # Add "LDFLAGS += -L$(AMBIT_DIR)/lib -lambit"
            addons = "# Added by FORTE setup\n"
            addons += "AMBIT_BINDIR = %s\n" % args.ambit_bindir
            addons += "INCLUDES += -I$(AMBIT_BINDIR)/include\n"
            addons += "LDFLAGS += -L$(AMBIT_BINDIR)/lib -lambit\n"
            re_addons = re.compile(r"DEPENDINCLUDE")
            makefile = re_addons.sub(addons + "\nDEPENDINCLUDE",makefile)

            with open('Makefile','w+') as f:
                f.write(makefile)
        else:
            print "Failed to generate a Makefile via 'psi4 --new-plugin-makefile'"
            return False

    elif args.psi4:
        print "Please specify the location of the AMBIT directory."
    return True


def print_build_help(build_path):
    print('   configure step is done')
    print('   now you need to compile the sources:')
    print('   >>> cd ' + build_path + '/src')
    print('   >>> make')


def save_setup_command(argv, build_path):
    file_name = os.path.join(build_path, 'setup_command')
    f = open(file_name, 'w')
    f.write('# setup command was executed '+datetime.datetime.now().strftime("%d-%B-%Y %H:%M:%S"+"\n"))
    f.write(" ".join(argv[:])+"\n")
    f.close()


def main(argv):
    if len(argv) == 1:
        argv.append("--help")
    args = parse_input()
    save_setup_command(argv,root_directory)
    configure_default_psi4(args)
    status = generate_makefile(args)

    if status:
        # configuration was successful
        print_build_help(root_directory)
    else:
        # configuration was not successful
        print "Sorry, something went wrong :("


def configure_default_psi4(args):
    if not args.psi4:
        # no --psi4-exe provided
        command = ["which","psi4"]
        p = subprocess.Popen(command, stdout=subprocess.PIPE)
        result = p.stdout.readlines()
        if len(res) == 0:
            print "Could not detect your PSI4 executable.  Please specify its location."
            exit(1)
        args.psi4 = result[0][:-1]

if __name__ == '__main__':
    main(sys.argv)
