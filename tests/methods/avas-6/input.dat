#! Test AO Subspace regular expression on 3d orbitals

refscf = -1646.626167484472944
ref_occ = {
    'RESTRICTED_DOCC': np.array([14, 6, 8, 11]),
    'ACTIVE': np.array([7, 3, 4, 4]),
    'RESTRICTED_UOCC': np.array([33, 19, 23, 27])
}
reffci = -1646.665078750586872

import forte
memory 2 gb

molecule FeCp2 {
Fe 0.000000  0.000000  0.000000
C -0.713500 -0.982049 -1.648000
C  0.713500 -0.982049 -1.648000
C  1.154467  0.375109 -1.648000
C  0.000000  1.213879 -1.648000
C -1.154467  0.375109 -1.648000
H -1.347694 -1.854942 -1.638208
H  1.347694 -1.854942 -1.638208
H  2.180615  0.708525 -1.638208
H  0.000000  2.292835 -1.638208
H -2.180615  0.708525 -1.638208
C -0.713500 -0.982049  1.648000
C -1.154467  0.375109  1.648000
C -0.000000  1.213879  1.648000
C  1.154467  0.375109  1.648000
C  0.713500 -0.982049  1.648000
H -1.347694 -1.854942  1.638208
H -2.180615  0.708525  1.638208
H  0.000000  2.292835  1.638208
H  2.180615  0.708525  1.638208
H  1.347694 -1.854942  1.638208
noreorient  # very important for subspace orbitals orientations
}

basis {
assign 6-31g
assign Fe cc-pvdz
}

set {
scf_type            df
reference           rhf
docc                [18,7,10,13]
e_convergence       8
d_convergence       8
}
Escf, wfn = energy('scf', return_wfn=True)
compare_values(refscf, Escf, 8, "SCF energy")

set forte {
job_type            none
avas                true
avas_diagonalize    true
# the hard way
subspace            ["Fe(3dxy)","Fe(3dxz)","Fe(3dyz)","Fe(3dz2)","Fe(3dx2-y2)",
                     "C1(2pz)","C2(2pz)","C3(2pz)","C4(2pz)","C5(2pz)",
                     "C6(2pz)","C7(2pz)","C8(2pz)","C9(2pz)","C10(2pz)"]
# the easier way
#subspace            ["Fe(3d)","C1-10(2pz)"]
# the easiest way
#subspace            ["Fe(3d)","C(2pz)"]
}
Ezero, wfn = energy('forte', ref_wfn=wfn, return_wfn=True)

# check AVAS suggested orbital dimensions
for space_name, occ_array in ref_occ.items():
    array = variable('AVAS ' + space_name).np.reshape((4,))
    compare_values(occ_array, array, 6, 'AVAS ' + space_name)

set forte {
job_type            newdriver
subspace            ["Fe(3d)"]
avas                true
avas_cutoff         0.15
int_type            df
active_space_solver fci
restricted_docc     [16,6,9,12]
active              [2,2,1,2]
}
Ecasci, wfn = energy('forte', ref_wfn=wfn, return_wfn=True)
compare_values(reffci, Ecasci, 8, "CASCI(10e,7o) energy")
