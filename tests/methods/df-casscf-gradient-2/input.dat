# Test DF-MCSCF analytic gradients with frozen orbitals

import forte

# ref_grad from 5-point finite difference
ref_grad = psi4.Matrix.from_list([
    [-0.0009775460, -0.0082154776, 0.0000000000],
    [ 0.0009775460,  0.0082154776, 0.0000000000],
    [ 0.0068717247,  0.0043753883, 0.0000000000],
    [-0.0068717247, -0.0043753883, 0.0000000000],
    [-0.0085117226, -0.0044009360, 0.0000000000],
    [ 0.0085117226,  0.0044009360, 0.0000000000],
    [-0.0186375215, -0.0052285808, 0.0000000000],
    [ 0.0186375215,  0.0052285808, 0.0000000000],
    [-0.0190885742,  0.0141712291, 0.0000000000],
    [ 0.0190885742, -0.0141712291, 0.0000000000]
])

molecule butadiene{
H  1.080977 -2.558832  0.000000
H -1.080977  2.558832  0.000000
H  2.103773 -1.017723  0.000000
H -2.103773  1.017723  0.000000
H -0.973565 -1.219040  0.000000
H  0.973565  1.219040  0.000000
C  0.000000  0.728881  0.000000
C  0.000000 -0.728881  0.000000
C  1.117962 -1.474815  0.000000
C -1.117962  1.474815  0.000000
}

set globals {
  reference            rhf
  scf_type             df
  e_convergence        12
  d_convergence        10
  maxiter              100
  basis                dz
  docc                 [7,1,1,6]
  df_basis_scf         def2-universal-jkfit
  df_basis_mp2         def2-universal-jkfit
}

set forte{
  int_type             df
  active_space_solver  fci
  frozen_docc          [2,0,0,2]
  restricted_docc      [5,0,0,4]
  active               [0,2,2,0]
  frozen_uocc          [2,0,0,2]
  e_convergence        1e-12
  mcscf_maxiter        100
  mcscf_g_convergence  1e-10
  mcscf_e_convergence  1e-12
  cpscf_convergence    1e-10
  mcscf_ignore_frozen_orbs false
}

#set gradient_write true
#set findif points 5
grad = gradient('forte')
compare_matrices(ref_grad, grad, 7, "CASSCF(4,4)/DZ gradient on butadiene with frozen orbitals")
